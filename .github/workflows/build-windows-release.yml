name: Build QTrigdoppler Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering
    inputs:
      create_release:
        description: 'Create a GitHub release'
        required: false
        default: 'true'
        type: boolean

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Use stable Python version
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Verify required files exist
      run: |
        if (!(Test-Path "config.ini.example")) { throw "config.ini.example not found" }
        if (!(Test-Path "doppler.sqf")) { throw "doppler.sqf not found" }
        if (!(Test-Path "mykepler.txt")) { throw "mykepler.txt not found" }
        if (!(Test-Path "images/splash.jpg")) { throw "splash.jpg not found" }
        echo "All required files found"
    
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile QTrigdoppler.py --exclude-module PyQt6 --splash images/splash.jpg --name QTrigdoppler-${{ github.ref_name }}
    
    - name: Create release package
      run: |
        # Create release directory
        New-Item -ItemType Directory -Path "release" -Force
        
        # Copy executable
        Copy-Item "dist/QTrigdoppler-${{ github.ref_name }}.exe" "release/"
        
        # Copy required files
        Copy-Item "config.ini.example" "release/config.ini.example"
        Copy-Item "doppler.sqf" "release/"
        Copy-Item "mykepler.txt" "release/"
        
        # Copy documentation
        Copy-Item "README.md" "release/"
        Copy-Item "help/" "release/help/" -Recurse
        
        # Copy voices directory if it exists
        if (Test-Path "voices/") {
          Copy-Item "voices/" "release/voices/" -Recurse
        }
        
        # Create logs directory
        New-Item -ItemType Directory -Path "release/logs" -Force
        
        # Create setup instructions
        $content = @'
QTrigdoppler Release Package
============================

This package contains:
- QTrigdoppler-${{ github.ref_name }}.exe (Main application)
- config.ini.example (Copy this to config.ini and configure for your setup)
- doppler.sqf (Satellite frequency data)
- mykepler.txt (TLE data file)
- help/ (Documentation folder)
- voices/ (Audio files for voice announcements)
- logs/ (Directory for log files)

Setup Instructions:
1. Copy config.ini.example to config.ini
2. Edit config.ini with your radio and location settings
3. Run QTrigdoppler-${{ github.ref_name }}.exe

For detailed configuration help, see the files in the help/ directory.
'@
        $content | Out-File -FilePath "release/README-RELEASE.txt" -Encoding UTF8
    
    - name: Create ZIP archive
      run: |
        $version = "${{ github.ref_name }}"
        if ($version -eq "") { $version = "dev" }
        Compress-Archive -Path "release/*" -DestinationPath "QTrigdoppler-$version-windows.zip"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: QTrigdoppler-${{ github.ref_name }}-windows
        path: QTrigdoppler-*.zip
        retention-days: 30
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      uses: softprops/action-gh-release@v2
      with:
        files: QTrigdoppler-*.zip
        name: "QTrigdoppler ${{ github.ref_name }}"
        body: |
          ## QTrigdoppler Release ${{ github.ref_name }}
          
          ### What's Included
          - QTrigdoppler executable for Windows
          - Configuration files and documentation
          - Satellite data files
          - Voice files for announcements
          
          ### Installation
          1. Download and extract the ZIP file
          2. Copy `config.ini.example` to `config.ini`
          3. Edit `config.ini` with your radio and location settings
          4. Run the executable
          
          ### Requirements
          - Windows 10/11
          - ICOM radio (IC-910, IC-9700, etc.) with CI-V interface
          - Serial/USB connection to radio
          
          See the `help/` directory for detailed setup instructions.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libxcb1 \
          libxcb-cursor0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-shape0 \
          libxcb-xfixes0 \
          libxcb-xinerama0 \
          libxcb-xkb1 \
          libxkbcommon-x11-0 \
          libxkbcommon0
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile QTrigdoppler.py --exclude-module PyQt6 --splash images/splash.jpg --name QTrigdoppler-${{ github.ref_name }}-linux
    
    - name: Create release package
      run: |
        # Create release directory
        mkdir -p release
        
        # Copy executable
        cp dist/QTrigdoppler-${{ github.ref_name }}-linux release/
        chmod +x release/QTrigdoppler-${{ github.ref_name }}-linux
        
        # Copy required files
        cp config.ini.example release/
        cp doppler.sqf release/
        cp mykepler.txt release/
        cp README.md release/
        cp -r help/ release/
        
        # Copy voices directory if it exists
        if [ -d "voices/" ]; then
          cp -r voices/ release/
        fi
        
        # Create logs directory
        mkdir -p release/logs
        
        # Create setup instructions for Linux
        cat > release/README-RELEASE.txt << 'EOF'
QTrigdoppler Linux Release Package
==================================

This package contains:
- QTrigdoppler-${{ github.ref_name }}-linux (Main application)
- config.ini.example (Copy this to config.ini and configure for your setup)
- doppler.sqf (Satellite frequency data)
- mykepler.txt (TLE data file)
- help/ (Documentation folder)
- voices/ (Audio files for voice announcements)
- logs/ (Directory for log files)

Setup Instructions:
1. Copy config.ini.example to config.ini
2. Edit config.ini with your radio and location settings
3. Make sure the executable is executable: chmod +x QTrigdoppler-*-linux
4. Run ./QTrigdoppler-${{ github.ref_name }}-linux

System Requirements:
- Linux (tested on Ubuntu 20.04+)
- Qt libraries (usually pre-installed on most desktop distributions)

For detailed configuration help, see the files in the help/ directory.
EOF
    
    - name: Create TAR.GZ archive
      run: |
        version="${{ github.ref_name }}"
        if [ -z "$version" ]; then version="dev"; fi
        tar -czf "QTrigdoppler-$version-linux.tar.gz" -C release .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: QTrigdoppler-${{ github.ref_name }}-linux
        path: QTrigdoppler-*.tar.gz
        retention-days: 30
    
    - name: Add to GitHub Release
      if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      uses: softprops/action-gh-release@v2
      with:
        files: QTrigdoppler-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
